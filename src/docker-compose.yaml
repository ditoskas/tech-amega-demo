# Please refer https://aka.ms/HTTPSinContainer on how to setup an https developer certificate for your ASP .NET Core service.

version: '3.4'

#create a volume for the my sql container.To ensure Data persists after my sql container is stopped
volumes:
  datafiles:

services:
  #DataBase Service
  database:
    #Pull the latest mysql image
    image: mysql:8.0.22
    #Map port 3306 on the mysql container to port 3306 in the host
    ports:
      - "3306:3306"
    #Specify where the persisted Data should be stored
    volumes:
      - datafiles:/var/lib/mysql
      - "~/sql-scripts/setup.sql:/docker-entrypoint-initdb.d/1.sql"
    restart: always
    #Specify Environment Variables for mysql
    environment: 
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_USER: amega
      MYSQL_PASSWORD: Am3ga!
      MYSQL_DATABASE: amega
  #Api  Service
  api:
    build:
      context: .
      #Use the DockerFile in that Directory
      dockerfile: "/Presentation/Api/Dockerfile"
    #This Service Depends on the database service specifed above
    depends_on: 
      - database
    #Map port 8080 in the docker container to port 80 in the Api
    ports:
      - "8080:80"
    restart: always
    #Specify Environment Variables for the Api Service
    environment: 
      - DBHOST=database
      - ASPNETCORE_ENVIRONMENT=Development
  #web  Service
  web:
    build:
      context: .
      #Use the DockerFile in that Directory
      dockerfile: "/Presentation/web/Dockerfile"
    #This Service Depends on the database service specifed above
    depends_on: 
      - api
    #Map port 8083 in the docker container to port 80 in the web
    ports:
      - "8083:80"
    restart: always
    #Specify Environment Variables for the web Service
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development
  #push  Service
  push:
    build:
      context: .
      #Use the DockerFile in that Directory
      dockerfile: "/Presentation/PushService/Dockerfile"
    #This Service Depends on the database service specifed above
    depends_on: 
      - api
    #Map port 8083 in the docker container to port 80 in the push
    ports:
      - "8085:80"
    restart: always
    #Specify Environment Variables for the web Service
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development
  #Quotes Receiver Service
  quotes:
    build:
      context: .
      #Use the DockerFile in that Directory
      dockerfile: "/Presentation/QuotesReceiver/Dockerfile"
    #This Service Depends on the database service specifed above
    depends_on: 
      - rabbitmq
    #Map port 8083 in the docker container to port 80 in the push
    ports:
      - "8085:80"
    restart: always
    #Specify Environment Variables for the web Service
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development
  rabbitmq:
      image: rabbitmq:3-management-alpine
      container_name: 'rabbitmq'
      ports:
          - 5672:5672
          - 15672:15672
      volumes:
          - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
          - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      networks:
          - rabbitmq_go_net
networks:
  rabbitmq_go_net:
    driver: bridge
